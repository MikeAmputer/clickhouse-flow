name: Manual release

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ch-flow

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract version from package.json
      run: |
        VERSION=$(jq -r .version package.json)
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "Version extracted from package.json: $VERSION"

    - name: Set image namespace variable
      run: |
        NAMESPACE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "NAMESPACE=$NAMESPACE" >> "$GITHUB_ENV"
        echo "Namespace: $NAMESPACE"

    - name: Validate version tag does not exist on GHCR
      run: |
        if docker manifest inspect ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}; then
          echo "$NAMESPACE/$IMAGE_NAME image tag $VERSION already exists on GHCR."
          exit 1
        else
          echo "$NAMESPACE/$IMAGE_NAME image tag $VERSION does not exist yet."
        fi

    - name: Build docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:current .

    - name: Build slim docker image
      uses: kitabisa/docker-slim-action@v1
      env:
        DSLIM_HTTP_PROBE: true
        DSLIM_HTTP_PROBE_PORT: 3000
        DSLIM_INCLUDE_PATH: |
          /app
      with:
        target: ${{ env.IMAGE_NAME }}:current
        tag: ${{ env.VERSION }}-slim

    - name: Tag docker image
      run: |
        docker tag ${{ env.IMAGE_NAME }}:current ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.IMAGE_NAME }}:current ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        docker tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }}-slim ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-slim

    - name: List local docker images
      run: docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.Size}}"

    - name: Login to GHCR
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push to GHCR
      run: |
        docker push ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        docker push ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
        docker push ghcr.io/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-slim
